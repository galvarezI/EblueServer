// <auto-generated />
using System;
using EblueWorkPlan.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EblueWorkPlan.Migrations
{
    [DbContext(typeof(WorkplandbContext))]
    partial class WorkplandbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EblueWorkPlan.Models.AdminOfficerComment", b =>
                {
                    b.Property<int>("AdminOfficerCommentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("adminOfficerCommentsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminOfficerCommentsId"));

                    b.Property<string>("AdComments")
                        .HasColumnType("text");

                    b.Property<string>("FundsComments")
                        .HasColumnType("text");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<DateTime?>("ProjectVigency")
                        .HasColumnType("date")
                        .HasColumnName("projectVigency");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("date");

                    b.Property<string>("UserRole")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("WorkplanQuantity")
                        .HasColumnType("text");

                    b.HasKey("AdminOfficerCommentsId")
                        .HasName("PK__adminOff__83E2C4E3A74A6E2A");

                    b.HasIndex("ProjectId");

                    b.ToTable("adminOfficerComments", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Analytical", b =>
                {
                    b.Property<int>("AnalyticalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnalyticalID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnalyticalId"));

                    b.Property<string>("AnalysisRequired")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("analysisRequired");

                    b.Property<string>("NumSamples")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("numSamples");

                    b.Property<DateTime?>("ProbableDate")
                        .HasColumnType("date");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.HasKey("AnalyticalId")
                        .HasName("PK__Analytic__B1E78B77D97F9138");

                    b.HasIndex("ProjectId");

                    b.ToTable("Analytical", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Commodity", b =>
                {
                    b.Property<int>("CommId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommId"));

                    b.Property<string>("CommName")
                        .IsRequired()
                        .HasMaxLength(210)
                        .HasColumnType("nvarchar(210)");

                    b.HasKey("CommId")
                        .HasName("PK__commodit__AF8CE2B9D73102EF");

                    b.ToTable("commodity", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DepartmentOf")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentOldId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentOldID");

                    b.Property<int?>("RosterDepartmentDirectorId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId")
                        .HasName("PK__Departme__B2079BCD83D4441F");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.FieldOption", b =>
                {
                    b.Property<int>("FieldoptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fieldoptionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldoptionId"));

                    b.Property<string>("OptionName")
                        .HasColumnType("text");

                    b.HasKey("FieldoptionId")
                        .HasName("PK__fieldOpt__07A1D99EA2DE5B4F");

                    b.ToTable("fieldOption", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.FieldWork", b =>
                {
                    b.Property<int>("FieldWorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FieldWorkID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldWorkId"));

                    b.Property<string>("Area")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("DateEnded")
                        .HasColumnType("date")
                        .HasColumnName("dateEnded");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("date")
                        .HasColumnName("dateStarted");

                    b.Property<int?>("FieldoptionId")
                        .HasColumnType("int")
                        .HasColumnName("fieldoptionId");

                    b.Property<bool>("InProgress")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<bool>("ToBeInitiated")
                        .HasColumnType("bit");

                    b.Property<string>("Wfieldwork")
                        .HasColumnType("text")
                        .HasColumnName("WFieldwork");

                    b.HasKey("FieldWorkId")
                        .HasName("PK__FieldWor__460E4F22C33E2AF1");

                    b.HasIndex("FieldoptionId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("FieldWork", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.FiscalYear", b =>
                {
                    b.Property<int>("FiscalYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FiscalYearID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FiscalYearId"));

                    b.Property<string>("FiscalYearName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FiscalYearNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("FiscalYearStatusId")
                        .HasColumnType("int")
                        .HasColumnName("FiscalYearStatusID");

                    b.HasKey("FiscalYearId")
                        .HasName("PK__fiscalYe__A4E4808FFED4D144");

                    b.HasIndex("FiscalYearStatusId");

                    b.ToTable("fiscalYear", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.FiscalYearStatus", b =>
                {
                    b.Property<int>("FiscalYearStatusId")
                        .HasColumnType("int")
                        .HasColumnName("FiscalYearStatusID");

                    b.Property<string>("FiscalYearStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FiscalYearStatusId")
                        .HasName("PK__FiscalYe__B9296B5B9DD4ADE8");

                    b.ToTable("FiscalYearStatus", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Fund", b =>
                {
                    b.Property<int>("FundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FundID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundId"));

                    b.Property<decimal?>("Abroad")
                        .HasColumnType("money");

                    b.Property<decimal?>("Assistant")
                        .HasColumnType("money");

                    b.Property<decimal?>("Benefits")
                        .HasColumnType("money");

                    b.Property<decimal?>("Equipment")
                        .HasColumnType("money");

                    b.Property<decimal?>("IndirectCosts")
                        .HasColumnType("money");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<decimal?>("Materials")
                        .HasColumnType("money");

                    b.Property<decimal?>("Others")
                        .HasColumnType("money");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<decimal?>("Salaries")
                        .HasColumnType("money");

                    b.Property<decimal?>("Subcontracts")
                        .HasColumnType("money");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("money");

                    b.Property<decimal?>("Travel")
                        .HasColumnType("money");

                    b.Property<string>("Ufisaccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UFISaccount");

                    b.Property<decimal?>("Wages")
                        .HasColumnType("money");

                    b.HasKey("FundId")
                        .HasName("PK__funds__830DFC7A77D3E65F");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("funds", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.FundType", b =>
                {
                    b.Property<int>("FundTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FundTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundTypeId"));

                    b.Property<string>("FundTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsFederal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsState")
                        .HasColumnType("bit");

                    b.HasKey("FundTypeId")
                        .HasName("PK__FundType__1CA29CB4FFE3D5BA");

                    b.ToTable("FundType", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.GradAss", b =>
                {
                    b.Property<int>("Gaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GAID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Gaid"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Gname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("GradoptionId")
                        .HasColumnType("int")
                        .HasColumnName("gradoptionId");

                    b.Property<bool?>("IsGraduated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsUndergraduated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<string>("StudentName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Thesis")
                        .HasColumnType("text");

                    b.Property<int?>("ThesisProjectId")
                        .HasColumnType("int")
                        .HasColumnName("thesisProjectId");

                    b.HasKey("Gaid")
                        .HasName("PK__gradAss__53B87C56576534AD");

                    b.HasIndex("GradoptionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ThesisProjectId");

                    b.ToTable("gradAss", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.GradOption", b =>
                {
                    b.Property<int>("GradoptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("gradoptionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradoptionId"));

                    b.Property<string>("GradOptionName")
                        .HasColumnType("text")
                        .HasColumnName("gradOptionName");

                    b.HasKey("GradoptionId")
                        .HasName("PK__gradOpti__C83A08D1B9826E3F");

                    b.ToTable("gradOption", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Laboratory", b =>
                {
                    b.Property<int>("LabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LabID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabId"));

                    b.Property<string>("Areq")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("AReq");

                    b.Property<string>("CentralLaboratory")
                        .HasColumnType("text")
                        .HasColumnName("centralLaboratory");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("EstimatedTime")
                        .HasColumnType("text");

                    b.Property<string>("FacilitiesNeeded")
                        .HasColumnType("text");

                    b.Property<string>("NoSamples")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<DateTime?>("SamplesDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeEstimated")
                        .HasColumnType("date")
                        .HasColumnName("timeEstimated");

                    b.Property<string>("WorkPlanned")
                        .HasColumnType("text");

                    b.HasKey("LabId")
                        .HasName("PK__laborato__EDBD773A43FC9BAF");

                    b.HasIndex("ProjectId");

                    b.ToTable("laboratory", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Locationn", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("FundsVar")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("LocationOldId")
                        .HasColumnType("int")
                        .HasColumnName("LocationOldID");

                    b.HasKey("LocationId")
                        .HasName("PK__Location__E7FEA4779DCBB781");

                    b.ToTable("Locationn", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.OtherPersonel", b =>
                {
                    b.Property<int>("Opid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OPID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Opid"));

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("PerTime")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("PersonnelManAdded")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<string>("RoleManAdded")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("RosterId")
                        .HasColumnType("int")
                        .HasColumnName("RosterID");

                    b.HasKey("Opid")
                        .HasName("PK__OtherPer__AE2CBE1E1138560E");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RosterId");

                    b.ToTable("OtherPersonel", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Porganization", b =>
                {
                    b.Property<int>("PorganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("POrganizationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PorganizationId"));

                    b.Property<string>("PorganizationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("POrganizationName");

                    b.HasKey("PorganizationId")
                        .HasName("PK__POrganiz__52E382BC29BC6268");

                    b.ToTable("POrganization", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.PrincipalLocation", b =>
                {
                    b.Property<int>("PrincLocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrincLocID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrincLocId"));

                    b.Property<string>("PrincLocName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("PrincLocId")
                        .HasName("PK__principa__E67880F7556F770A");

                    b.ToTable("principalLocation", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.ProcessProjectWay", b =>
                {
                    b.Property<int>("EstatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessProjectWayId")
                        .HasColumnType("int")
                        .HasColumnName("ProcessProjectWayID");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasIndex("ProjectId");

                    b.ToTable("processProjectWay", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.ProgramArea", b =>
                {
                    b.Property<int>("ProgramAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgramAreaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramAreaId"));

                    b.Property<string>("ProgramAreaName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ProgramAreaOldId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramAreaOldID");

                    b.Property<int?>("RosterProgragmaticCoordinatorId")
                        .HasColumnType("int")
                        .HasColumnName("RosterProgragmaticCoordinatorID");

                    b.HasKey("ProgramAreaId")
                        .HasName("PK__ProgramA__FB5F0C9B6EAB4578");

                    b.ToTable("ProgramArea", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("Abroad")
                        .HasColumnType("text");

                    b.Property<string>("Assistant")
                        .HasColumnType("text");

                    b.Property<string>("Benefits")
                        .HasColumnType("text");

                    b.Property<int?>("CommId")
                        .HasColumnType("int")
                        .HasColumnName("CommID");

                    b.Property<string>("ContractNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateRegister")
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<string>("Facilities")
                        .HasColumnType("text");

                    b.Property<int?>("FiscalYearId")
                        .HasColumnType("int")
                        .HasColumnName("FiscalYearID");

                    b.Property<int?>("FundTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FundTypeID");

                    b.Property<string>("Impact")
                        .HasColumnType("text");

                    b.Property<string>("IndirectCosts")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<string>("Materials")
                        .HasColumnType("text");

                    b.Property<string>("ObjWorkPlan")
                        .HasColumnType("text");

                    b.Property<string>("Objectives")
                        .HasColumnType("text");

                    b.Property<string>("Objectives2")
                        .HasColumnType("text");

                    b.Property<string>("Objectives3")
                        .HasColumnType("text");

                    b.Property<string>("Objectives4")
                        .HasColumnType("text");

                    b.Property<string>("Objectives5")
                        .HasColumnType("text");

                    b.Property<string>("Objectives6")
                        .HasColumnType("text");

                    b.Property<string>("Orcid")
                        .HasColumnType("text")
                        .HasColumnName("ORCID");

                    b.Property<string>("Others")
                        .HasColumnType("text");

                    b.Property<int?>("PorganizationsId")
                        .HasColumnType("int")
                        .HasColumnName("POrganizationsId");

                    b.Property<string>("PresentOutlook")
                        .HasColumnType("text");

                    b.Property<int?>("ProcessProjectWayId")
                        .HasColumnType("int")
                        .HasColumnName("ProcessProjectWayID");

                    b.Property<int?>("ProgramAreaId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramAreaID");

                    b.Property<string>("ProjectNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProjectPi")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ProjectPI");

                    b.Property<int?>("ProjectStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectStatusID");

                    b.Property<string>("ProjectTitle")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ResultsAvailable")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RosterId")
                        .HasColumnType("int")
                        .HasColumnName("RosterID");

                    b.Property<string>("Salaries")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SubStationId")
                        .HasColumnType("int")
                        .HasColumnName("SubStationID");

                    b.Property<string>("Subcontracts")
                        .HasColumnType("text");

                    b.Property<string>("Substation")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Travel")
                        .HasColumnType("text");

                    b.Property<string>("Wages")
                        .HasColumnType("text");

                    b.Property<int?>("Wfsid")
                        .HasColumnType("int")
                        .HasColumnName("WFSID");

                    b.Property<DateTime?>("Wfupdate")
                        .HasColumnType("datetime")
                        .HasColumnName("WFUpdate");

                    b.Property<string>("WorkPlan2")
                        .HasColumnType("text");

                    b.Property<string>("Workplan2Desc")
                        .HasColumnType("text");

                    b.Property<string>("Wp1fieldWork")
                        .HasColumnType("text")
                        .HasColumnName("WP1FieldWork");

                    b.Property<int?>("Wp2id")
                        .HasColumnType("int")
                        .HasColumnName("WP2ID");

                    b.HasKey("ProjectId")
                        .HasName("PK__projects__761ABED05384DF0D");

                    b.HasIndex("CommId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FiscalYearId");

                    b.HasIndex("FundTypeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PorganizationsId");

                    b.HasIndex("ProgramAreaId");

                    b.HasIndex("ProjectStatusId");

                    b.HasIndex("RosterId");

                    b.HasIndex("SubStationId");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.ProjectAssent", b =>
                {
                    b.Property<int>("PassentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("passentsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassentsId"));

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("RosterData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RosterId")
                        .HasColumnType("int")
                        .HasColumnName("RosterID");

                    b.Property<string>("SignData")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("signData");

                    b.Property<DateTime>("SignDate")
                        .HasColumnType("datetime")
                        .HasColumnName("signDate");

                    b.HasKey("PassentsId")
                        .HasName("PK__projectA__A852A60925D0FE56");

                    b.ToTable("projectAssents", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.ProjectNote", b =>
                {
                    b.Property<int>("ProjectNotesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectNotesId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("DeanComments")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentDirectorComments")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<string>("Roles")
                        .HasColumnType("text");

                    b.Property<int?>("RosterId")
                        .HasColumnType("int")
                        .HasColumnName("RosterID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("UserRole")
                        .HasColumnType("text")
                        .HasColumnName("userRole");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("ProjectNotesId")
                        .HasName("PK__ProjectN__5DBF9709C49AD096");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RosterId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectNotes");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.ProjectStatus", b =>
                {
                    b.Property<int>("ProjectStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectStatusId"));

                    b.Property<string>("StatusName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("StatusNumber")
                        .HasColumnType("int");

                    b.HasKey("ProjectStatusId")
                        .HasName("PK__ProjectS__5D285B23212BDFA7");

                    b.ToTable("ProjectStatus", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Role", b =>
                {
                    b.Property<int>("RolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RolesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolesId"));

                    b.Property<bool?>("IsAdministrativeOfficer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isAdministrativeOfficer")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsExecutiveOfficer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isExecutiveOfficer")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsExternalResources")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isExternalResources")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsResearchDirector")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isResearchDirector")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Rname")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("RName");

                    b.Property<int?>("RosterId")
                        .HasColumnType("int")
                        .HasColumnName("rosterID");

                    b.HasKey("RolesId")
                        .HasName("PK__Roles__C4B27820397EEFC7");

                    b.HasIndex("RosterId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Roster", b =>
                {
                    b.Property<int>("RosterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RosterID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RosterId"));

                    b.Property<bool>("CanBePi")
                        .HasColumnType("bit")
                        .HasColumnName("CanBePI");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("RosterName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RosterSegSoc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("RosterId")
                        .HasName("PK__roster__66F6BAAA8C8256A5");

                    b.ToTable("roster", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.SciProject", b =>
                {
                    b.Property<int>("SciId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SciID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SciId"));

                    b.Property<bool?>("AdHonorem")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Ah")
                        .HasColumnType("money")
                        .HasColumnName("AH");

                    b.Property<decimal?>("Ca")
                        .HasColumnType("money")
                        .HasColumnName("CA");

                    b.Property<decimal?>("Credits")
                        .HasColumnType("money");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<int>("Roles")
                        .HasColumnType("int");

                    b.Property<int>("RosterId")
                        .HasColumnType("int")
                        .HasColumnName("RosterID");

                    b.Property<int?>("SciRolesId")
                        .HasColumnType("int")
                        .HasColumnName("sciRolesID");

                    b.Property<int?>("ThesisProjectId")
                        .HasColumnType("int")
                        .HasColumnName("thesisProjectId");

                    b.Property<decimal?>("Tr")
                        .HasColumnType("money")
                        .HasColumnName("TR");

                    b.HasKey("SciId")
                        .HasName("PK__sciProje__CB9BA1E286343BBD");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RosterId");

                    b.HasIndex("SciRolesId");

                    b.HasIndex("ThesisProjectId");

                    b.ToTable("sciProjects", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.SciRole", b =>
                {
                    b.Property<int>("SciRolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sciRolesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SciRolesId"));

                    b.Property<string>("SciRoleName")
                        .HasColumnType("text");

                    b.HasKey("SciRolesId")
                        .HasName("PK__sciRoles__16C5DC50D6D60DAB");

                    b.ToTable("sciRoles", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Substacion", b =>
                {
                    b.Property<int>("SubstationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubstationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubstationId"));

                    b.Property<string>("SubStationName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("SubstationId")
                        .HasName("PK__Substaci__BB479C6F556A2D47");

                    b.ToTable("Substacion", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.ThesisProject", b =>
                {
                    b.Property<int>("ThesisProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("thesisProjectId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThesisProjectId"));

                    b.Property<string>("OptionName")
                        .HasColumnType("text")
                        .HasColumnName("optionName");

                    b.HasKey("ThesisProjectId")
                        .HasName("PK__thesisPr__9806B82188DB597F");

                    b.ToTable("thesisProject", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isEnabled")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Password")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Roles")
                        .HasColumnType("text");

                    b.Property<int?>("RolesId")
                        .HasColumnType("int")
                        .HasColumnName("RolesID");

                    b.Property<int?>("RosterId")
                        .HasColumnType("int")
                        .HasColumnName("RosterID");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCACB660C449");

                    b.HasIndex("RolesId");

                    b.HasIndex("RosterId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EblueWorkPlan.Models.AdminOfficerComment", b =>
                {
                    b.HasOne("EblueWorkPlan.Models.Project", "Project")
                        .WithMany("AdminOfficerComments")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__adminOffi__Proje__3429BB53");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Analytical", b =>
                {
                    b.HasOne("EblueWorkPlan.Models.Project", "Project")
                        .WithMany("Analyticals")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__Analytica__Proje__2B0A656D");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.FieldWork", b =>
                {
                    b.HasOne("EblueWorkPlan.Models.FieldOption", "Fieldoption")
                        .WithMany("FieldWorks")
                        .HasForeignKey("FieldoptionId")
                        .HasConstraintName("FK__FieldWork__field__54CB950F");

                    b.HasOne("EblueWorkPlan.Models.Locationn", "Location")
                        .WithMany("FieldWorks")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK__FieldWork__Locat__68487DD7");

                    b.HasOne("EblueWorkPlan.Models.Project", "Project")
                        .WithMany("FieldWorks")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK__FieldWork__Proje__6754599E");

                    b.Navigation("Fieldoption");

                    b.Navigation("Location");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.FiscalYear", b =>
                {
                    b.HasOne("EblueWorkPlan.Models.FiscalYearStatus", "FiscalYearStatus")
                        .WithMany("FiscalYears")
                        .HasForeignKey("FiscalYearStatusId")
                        .IsRequired()
                        .HasConstraintName("FK__fiscalYea__Fisca__5AEE82B9");

                    b.Navigation("FiscalYearStatus");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Fund", b =>
                {
                    b.HasOne("EblueWorkPlan.Models.Locationn", "Location")
                        .WithMany("Funds")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK__funds__LocationI__6383C8BA");

                    b.HasOne("EblueWorkPlan.Models.Project", "Project")
                        .WithMany("Funds")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK__funds__ProjectID__6477ECF3");

                    b.Navigation("Location");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.GradAss", b =>
                {
                    b.HasOne("EblueWorkPlan.Models.GradOption", "Gradoption")
                        .WithMany("GradAsses")
                        .HasForeignKey("GradoptionId")
                        .HasConstraintName("FK__gradAss__gradopt__589C25F3");

                    b.HasOne("EblueWorkPlan.Models.Project", "Project")
                        .WithMany("GradAsses")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__gradAss__Project__5441852A");

                    b.HasOne("EblueWorkPlan.Models.ThesisProject", "ThesisProject")
                        .WithMany("GradAsses")
                        .HasForeignKey("ThesisProjectId")
                        .HasConstraintName("FK__gradAss__thesisP__3FD07829");

                    b.Navigation("Gradoption");

                    b.Navigation("Project");

                    b.Navigation("ThesisProject");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Laboratory", b =>
                {
                    b.HasOne("EblueWorkPlan.Models.Project", "Project")
                        .WithMany("Laboratories")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__laborator__Proje__49C3F6B7");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.OtherPersonel", b =>
                {
                    b.HasOne("EblueWorkPlan.Models.Locationn", "Location")
                        .WithMany("OtherPersonels")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__OtherPers__Locat__6C190EBB");

                    b.HasOne("EblueWorkPlan.Models.Project", "Project")
                        .WithMany("OtherPersonels")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__OtherPers__Proje__6B24EA82");

                    b.HasOne("EblueWorkPlan.Models.Roster", "Roster")
                        .WithMany("OtherPersonels")
                        .HasForeignKey("RosterId")
                        .HasConstraintName("FK__OtherPers__Roste__6D0D32F4");

                    b.Navigation("Location");

                    b.Navigation("Project");

                    b.Navigation("Roster");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.ProcessProjectWay", b =>
                {
                    b.HasOne("EblueWorkPlan.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK__processPr__Proje__4D94879B");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Project", b =>
                {
                    b.HasOne("EblueWorkPlan.Models.Commodity", "Comm")
                        .WithMany("Projects")
                        .HasForeignKey("CommId")
                        .HasConstraintName("FK__projects__CommID__797309D9");

                    b.HasOne("EblueWorkPlan.Models.Department", "Department")
                        .WithMany("Projects")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__projects__Depart__75A278F5");

                    b.HasOne("EblueWorkPlan.Models.FiscalYear", "FiscalYear")
                        .WithMany("Projects")
                        .HasForeignKey("FiscalYearId")
                        .HasConstraintName("FK__projects__Fiscal__787EE5A0");

                    b.HasOne("EblueWorkPlan.Models.FundType", "FundType")
                        .WithMany("Projects")
                        .HasForeignKey("FundTypeId")
                        .HasConstraintName("FK__projects__FundTy__160F4887");

                    b.HasOne("EblueWorkPlan.Models.Locationn", "Location")
                        .WithMany("Projects")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__projects__Locati__14270015");

                    b.HasOne("EblueWorkPlan.Models.Porganization", "Porganizations")
                        .WithMany("Projects")
                        .HasForeignKey("PorganizationsId")
                        .HasConstraintName("FK__projects__POrgan__151B244E");

                    b.HasOne("EblueWorkPlan.Models.ProgramArea", "ProgramArea")
                        .WithMany("Projects")
                        .HasForeignKey("ProgramAreaId")
                        .HasConstraintName("FK__projects__Progra__76969D2E");

                    b.HasOne("EblueWorkPlan.Models.ProjectStatus", "ProjectStatus")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStatusId")
                        .HasConstraintName("FK__projects__Projec__595B4002");

                    b.HasOne("EblueWorkPlan.Models.Roster", "Roster")
                        .WithMany("Projects")
                        .HasForeignKey("RosterId")
                        .HasConstraintName("FK__projects__Roster__3D2915A8");

                    b.HasOne("EblueWorkPlan.Models.Substacion", "SubStation")
                        .WithMany("Projects")
                        .HasForeignKey("SubStationId")
                        .HasConstraintName("FK__projects__SubSta__3C34F16F");

                    b.Navigation("Comm");

                    b.Navigation("Department");

                    b.Navigation("FiscalYear");

                    b.Navigation("FundType");

                    b.Navigation("Location");

                    b.Navigation("Porganizations");

                    b.Navigation("ProgramArea");

                    b.Navigation("ProjectStatus");

                    b.Navigation("Roster");

                    b.Navigation("SubStation");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.ProjectNote", b =>
                {
                    b.HasOne("EblueWorkPlan.Models.Project", "Project")
                        .WithMany("ProjectNotes")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__ProjectNo__Proje__214BF109");

                    b.HasOne("EblueWorkPlan.Models.Roster", "Roster")
                        .WithMany("ProjectNotes")
                        .HasForeignKey("RosterId")
                        .HasConstraintName("FK__ProjectNo__Roste__22401542");

                    b.HasOne("EblueWorkPlan.Models.User", "User")
                        .WithMany("ProjectNotes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__ProjectNo__UserI__2057CCD0");

                    b.Navigation("Project");

                    b.Navigation("Roster");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Role", b =>
                {
                    b.HasOne("EblueWorkPlan.Models.Roster", "Roster")
                        .WithMany("Roles")
                        .HasForeignKey("RosterId")
                        .HasConstraintName("FK__Roles__rosterID__3F466844");

                    b.Navigation("Roster");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.SciProject", b =>
                {
                    b.HasOne("EblueWorkPlan.Models.Project", "Project")
                        .WithMany("SciProjects")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__sciProjec__Proje__1E6F845E");

                    b.HasOne("EblueWorkPlan.Models.Roster", "Roster")
                        .WithMany("SciProjects")
                        .HasForeignKey("RosterId")
                        .IsRequired()
                        .HasConstraintName("FK__sciProjec__Roste__1F63A897");

                    b.HasOne("EblueWorkPlan.Models.SciRole", "SciRoles")
                        .WithMany("SciProjects")
                        .HasForeignKey("SciRolesId")
                        .HasConstraintName("FK__sciProjec__sciRo__2116E6DF");

                    b.HasOne("EblueWorkPlan.Models.ThesisProject", "ThesisProject")
                        .WithMany("SciProjects")
                        .HasForeignKey("ThesisProjectId")
                        .HasConstraintName("FK__sciProjec__thesi__2EA5EC27");

                    b.Navigation("Project");

                    b.Navigation("Roster");

                    b.Navigation("SciRoles");

                    b.Navigation("ThesisProject");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.User", b =>
                {
                    b.HasOne("EblueWorkPlan.Models.Role", "RolesNavigation")
                        .WithMany("Users")
                        .HasForeignKey("RolesId")
                        .HasConstraintName("FK__Users__RolesID__0697FACD");

                    b.HasOne("EblueWorkPlan.Models.Roster", "Roster")
                        .WithMany("Users")
                        .HasForeignKey("RosterId")
                        .HasConstraintName("FK__Users__RosterID__6FE99F9F");

                    b.Navigation("RolesNavigation");

                    b.Navigation("Roster");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Commodity", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Department", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.FieldOption", b =>
                {
                    b.Navigation("FieldWorks");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.FiscalYear", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.FiscalYearStatus", b =>
                {
                    b.Navigation("FiscalYears");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.FundType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.GradOption", b =>
                {
                    b.Navigation("GradAsses");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Locationn", b =>
                {
                    b.Navigation("FieldWorks");

                    b.Navigation("Funds");

                    b.Navigation("OtherPersonels");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Porganization", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.ProgramArea", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Project", b =>
                {
                    b.Navigation("AdminOfficerComments");

                    b.Navigation("Analyticals");

                    b.Navigation("FieldWorks");

                    b.Navigation("Funds");

                    b.Navigation("GradAsses");

                    b.Navigation("Laboratories");

                    b.Navigation("OtherPersonels");

                    b.Navigation("ProjectNotes");

                    b.Navigation("SciProjects");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Roster", b =>
                {
                    b.Navigation("OtherPersonels");

                    b.Navigation("ProjectNotes");

                    b.Navigation("Projects");

                    b.Navigation("Roles");

                    b.Navigation("SciProjects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.SciRole", b =>
                {
                    b.Navigation("SciProjects");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.Substacion", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.ThesisProject", b =>
                {
                    b.Navigation("GradAsses");

                    b.Navigation("SciProjects");
                });

            modelBuilder.Entity("EblueWorkPlan.Models.User", b =>
                {
                    b.Navigation("ProjectNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
